program		=	statements
;
statements	=	{statement}
;
statement	=	variableDeclaration ';'
			|	functionDeclaration
			|	if | for | do | while 
			|	block | return 
			|	'break' ';' | 'continue' ';'
			|	variableAssignment ';'
			|	functionInvocation ';'
;

variableDeclaration	=	'var' identifier ':' identifier ['=' expression]
;
variableAssignment	=	identifier '=' expression
;
functionInvocation	=	identifier '(' [expression {',' expression}] ')'
;
functionDeclaration	=	'fun' identifier '(' paramsDeclaration ')' ':' identifier block
;
paramsDeclaration	=	[identifier ':' identifier {',' identifier ':' identifier}]
;
return		=	'return' expression ';'
;
block		=	'{' statements '}'
;

if		=	'if' '(' expression ')' statement {'else' 'if' '(' expression ')' statement} ['else' statement]
;

for		=	'for' '(' identifier 'in' expression 'until' expression  ')' statement
;
while	=	'while' '(' expression ')' statement
;
do		=	'do' block 'while' '(' expression ')' ';'
;

		
expression 		=	secondLevel {('||' | '&&') secondLevel}
;
secondLevel		=	thirdLevel {('==' | '!=' | '<=' | '>=' | '<' | '>') thirdLevel}
; 
thirdLevel		=	[('+' | '-' | '!')] fourthLevel {('+' | '-') fourthLevel}
;
fourthLevel		=	fifthLevel {('*' | '/') fifthLevel}
;
fifthLevel		=	sixthLevel {'%' sixthLevel}
;
sixthLevel		=	functionInvocation | value | identifier | '(' expression ')'
;

identifier		=	/[a-zA-Z_][a-zA-Z0-9_]*/
;
value			=	bool | number | string
;
string		=	/["].*["]/
;
number		=	/[0-9]+([.][0-9]+)?/
;
bool			=	'true' | 'false'
;
